//
//  singleton.h
//  WolframAlphaAPI
//
//  Created by Christopher Kim on 6/5/13.
//  Copyright (c) 2013 Christopher Kim. All rights reserved.
//

#ifndef WolframAlphaAPI_singleton_h
#define WolframAlphaAPI_singleton_h

#if OGRE_COMPILER == OGRE_COMPILER_MSVC
// Turn off warnings generated by this singleton implementation
#   pragma warning (disable : 4311)
#   pragma warning (disable : 4312)
#endif
#include <assert.h>
#include <stddef.h>
template <typename T> class Singleton
{
protected:
	
	static T* ms_Singleton;
	
public:
	Singleton( void )
	{
		assert( !ms_Singleton );
#if defined( _MSC_VER ) && _MSC_VER < 1200
		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
		ms_Singleton = (T*)((int)this + offset);
#else
		ms_Singleton = static_cast< T* >( this );
#endif
	}
	~Singleton( void )
	{
		assert( ms_Singleton );
		ms_Singleton = 0;
	}
	
	static void createSingleton( void )
	{
		assert( !ms_Singleton );
		ms_Singleton = new T;
	}
    
	
	static void destroySingleton( void )
	{
		if( ms_Singleton )
		{
			delete ms_Singleton;
			ms_Singleton = NULL;
		}
	}
	
	static T& get( void )
	{
		assert( ms_Singleton );
		return ( *ms_Singleton );
	}
	
	static T* getPtr( void )
	{
		return ms_Singleton;
	}
};

#endif
